model:
  arch: drugchat
  model_type: pretrain_vicuna
  freeze_gnn: true
  freeze_image_mol: true
  max_txt_len: 160
  low_resource: False
  end_sym: "###"
  prompt_path: "prompts/alignment.txt"
  prompt_template: '###Human: {} ###Assistant: '
  ckpt: ""  # specify a drugchat checkpoint, which can be pretrained on a large dataset
  encoder_names:
  - gnn
  - image_mol
  prompt_tuning: 0
  feat_dims:
    graph_feat: 300
    image_feat: 512
  use_mlp: false
  lora_rank: 0

datasets:
  fsmol:
    label: "fs-mol bioassay data"
    type: default
    vis_processor:
      train:
        name: "blip2_image_train"
        image_size: 224
    text_processor:
      train:
        name: "blip_caption"
    data_type:
    - image
    - graph
    build_info:
      storage: /data/fsmol/train
      storage_valid: /data/fsmol/val
      storage_test: /data/fsmol/test
    sample_ratio: 10000  # specify the dataset sampling ratio if there are multiple datasets here

  chembl:
    label: "chembl QA data"
    type: default
    vis_processor:
      train:
        name: "blip2_image_train"
        image_size: 224
    text_processor:
      train:
        name: "blip_caption"
    data_type:
    - image
    - graph
    build_info:
      storage: /data/chembl/__split__2,3,4  # this is the way to speicify the splits 2, 3, and 4 are used for training in cross validation
      storage_valid: /data/chembl/__split__1
      storage_test: /data/chembl/__split__0
    sample_ratio: 100

  # You can specify more datasets here. They will be used together

run:
  task: image_text_pretrain
  # optimizer
  lr_sched: "linear_warmup_cosine_lr"
  init_lr: 1e-4
  min_lr: 1e-5
  warmup_lr: 1e-5

  weight_decay: 0.01
  max_epoch: 8
  iters_per_epoch: null  # set to None for automatically infer number of iterations per epoch
  batch_size_train: 24
  batch_size_eval: 24
  num_workers: 2
  warmup_steps: 2000
  # val_iters: 2000

  seed: 42
  output_dir: "/data/drugchat_ckpt"  # to save models

  amp: true
  resume_ckpt_path: null

  evaluate: false  # if you just want to do inference (with ckpt specified above), you can set this to true
  generation: true  # if true, perform text generation on the test set
  generate_prob: '/data/eval_results/results.csv'  # if specified, perform text generation on the test set for binary classification (answers are yes/no), and save the results to this file
  train_splits: ["train"]
  valid_splits: ['valid']
  test_splits: ["test"]
  device: "cuda"
  world_size: 1
  dist_url: "env://"
  distributed: True